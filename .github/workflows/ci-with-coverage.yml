name: CI/CD with Code Coverage

on:
  pull_request:
    branches: [ main, master ]
  push:
    branches: [ main, master ]

jobs:
  # Backend .NET tests with coverage
  backend-tests:
    name: Backend Tests & Coverage (.NET 8)
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET 8
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Create load-bearing image
      run: touch loadbearingimage.jpg

    - name: Restore dependencies
      run: dotnet restore

    - name: Build solution
      run: dotnet build --no-restore --configuration Release

    - name: Run backend tests with coverage
      run: |
        dotnet test MangaCount.Server.Tests/ \
          --no-build \
          --configuration Release \
          --verbosity normal \
          --collect:"XPlat Code Coverage" \
          --results-directory ./coverage/backend \
          --logger trx \
          --logger "console;verbosity=detailed"

    - name: Install ReportGenerator
      run: dotnet tool install -g dotnet-reportgenerator-globaltool

    - name: Generate backend coverage report
      run: |
        reportgenerator \
          -reports:"./coverage/backend/**/coverage.cobertura.xml" \
          -targetdir:"./coverage/backend/report" \
          -reporttypes:"Html;JsonSummary;Badges;TextSummary"

    - name: Display backend coverage summary
      run: cat ./coverage/backend/report/Summary.txt

    - name: Upload backend coverage to GitHub
      uses: actions/upload-artifact@v4
      with:
        name: backend-coverage-report
        path: ./coverage/backend/report/

    - name: Upload backend coverage to Codecov
      if: github.event_name == 'pull_request'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/backend/**/coverage.cobertura.xml
        flags: backend
        name: backend-coverage

  # Frontend React tests with coverage
  frontend-tests:
    name: Frontend Tests & Coverage (React + Vitest)
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./mangacount.client

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: mangacount.client/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Run linting
      run: npm run lint

    - name: Run frontend tests with coverage
      run: npm run test:coverage -- --run --reporter=verbose

    - name: Display frontend coverage summary
      run: |
        echo "Frontend Coverage Summary:"
        if [ -f coverage/coverage-summary.json ]; then
          cat coverage/coverage-summary.json
        fi

    - name: Upload frontend coverage to GitHub
      uses: actions/upload-artifact@v4
      with:
        name: frontend-coverage-report
        path: mangacount.client/coverage/

    - name: Upload frontend coverage to Codecov
      if: github.event_name == 'pull_request'
      uses: codecov/codecov-action@v3
      with:
        file: ./mangacount.client/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  # Combined coverage report
  coverage-report:
    name: Generate Combined Coverage Report
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download backend coverage
      uses: actions/download-artifact@v4
      with:
        name: backend-coverage-report
        path: ./coverage/backend/

    - name: Download frontend coverage  
      uses: actions/download-artifact@v4
      with:
        name: frontend-coverage-report
        path: ./coverage/frontend/

    - name: Generate coverage badges
      run: |
        # Create badges directory
        mkdir -p badges
        
        # Backend coverage badge (if summary exists)
        if [ -f ./coverage/backend/Summary.json ]; then
          echo "Backend coverage data found"
        fi
        
        # Frontend coverage badge (if summary exists)
        if [ -f ./coverage/frontend/coverage-summary.json ]; then
          echo "Frontend coverage data found"
        fi

    - name: Comment coverage on PR
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          let coverageComment = '## 📊 Code Coverage Report\n\n';
          
          // Backend coverage
          try {
            if (fs.existsSync('./coverage/backend/Summary.txt')) {
              const backendSummary = fs.readFileSync('./coverage/backend/Summary.txt', 'utf8');
              coverageComment += '### 🏗️ Backend Coverage (.NET 8)\n```\n' + backendSummary + '\n```\n\n';
            }
          } catch (e) {
            coverageComment += '### 🏗️ Backend Coverage\n❌ Coverage report not found\n\n';
          }
          
          // Frontend coverage
          try {
            if (fs.existsSync('./coverage/frontend/coverage-summary.json')) {
              const frontendSummary = JSON.parse(fs.readFileSync('./coverage/frontend/coverage-summary.json', 'utf8'));
              const total = frontendSummary.total;
              coverageComment += '### ⚛️ Frontend Coverage (React + Vitest)\n';
              coverageComment += `- **Lines**: ${total.lines.pct}% (${total.lines.covered}/${total.lines.total})\n`;
              coverageComment += `- **Functions**: ${total.functions.pct}% (${total.functions.covered}/${total.functions.total})\n`;
              coverageComment += `- **Branches**: ${total.branches.pct}% (${total.branches.covered}/${total.branches.total})\n`;
              coverageComment += `- **Statements**: ${total.statements.pct}% (${total.statements.covered}/${total.statements.total})\n\n`;
            }
          } catch (e) {
            coverageComment += '### ⚛️ Frontend Coverage\n❌ Coverage report not found\n\n';
          }
          
          coverageComment += '### 📈 Coverage Reports\n';
          coverageComment += '- [Backend Coverage Report](../actions/runs/' + context.runId + '#artifacts)\n';
          coverageComment += '- [Frontend Coverage Report](../actions/runs/' + context.runId + '#artifacts)\n\n';
          coverageComment += '*Coverage reports are generated automatically on every PR*';
          
          // Find existing coverage comment and update or create new
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const existingComment = comments.find(comment => 
            comment.body.includes('📊 Code Coverage Report')
          );
          
          if (existingComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: existingComment.id,
              body: coverageComment
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: coverageComment
            });
          }

  # Build verification (same as before)
  build-verification:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET 8
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: mangacount.client/package-lock.json

    - name: Create load-bearing image
      run: touch loadbearingimage.jpg

    - name: Install frontend dependencies
      working-directory: ./mangacount.client
      run: npm ci

    - name: Build frontend
      working-directory: ./mangacount.client
      run: npm run build

    - name: Restore backend dependencies
      run: dotnet restore

    - name: Build backend
      run: dotnet build --no-restore --configuration Release

    - name: Publish application
      run: dotnet publish MangaCount.Server/ --no-build --configuration Release --output ./publish

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: published-app
        path: ./publish/